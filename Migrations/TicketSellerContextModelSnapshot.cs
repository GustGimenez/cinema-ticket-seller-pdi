// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using cinema_ticket_seller_pdi.Contexts;

#nullable disable

namespace cinema_ticket_seller_pdi.Migrations
{
    [DbContext(typeof(TicketSellerContext))]
    partial class TicketSellerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.Movie", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("MovieTheaterId")
                        .HasColumnType("bigint")
                        .HasColumnName("movie_theater_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("ParentalRating")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("parental_rating");

                    b.HasKey("Id");

                    b.HasIndex("MovieTheaterId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("movies");
                });

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.MovieSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint")
                        .HasColumnName("movie_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<int>("Seats")
                        .HasColumnType("integer")
                        .HasColumnName("seats");

                    b.Property<DateTime>("To")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("to");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("movie_sessions");
                });

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.MovieTheater", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("movie_theaters");
                });

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("ticket_quantity");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.Ticket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("MovieSessionId")
                        .HasColumnType("bigint")
                        .HasColumnName("movie_session_id");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.HasKey("Id");

                    b.HasIndex("MovieSessionId");

                    b.HasIndex("OrderId");

                    b.ToTable("tickets");
                });

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("active");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasColumnName("document");

                    b.Property<long?>("MovieTheaterId")
                        .HasColumnType("bigint")
                        .HasColumnName("movie_theater_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.HasIndex("Document")
                        .IsUnique();

                    b.HasIndex("MovieTheaterId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.Movie", b =>
                {
                    b.HasOne("cinema_ticket_seller_pdi.Models.MovieTheater", "MovieTheater")
                        .WithMany("Movies")
                        .HasForeignKey("MovieTheaterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieTheater");
                });

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.MovieSession", b =>
                {
                    b.HasOne("cinema_ticket_seller_pdi.Models.Movie", "Movie")
                        .WithMany("Sessions")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.Order", b =>
                {
                    b.HasOne("cinema_ticket_seller_pdi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.Ticket", b =>
                {
                    b.HasOne("cinema_ticket_seller_pdi.Models.MovieSession", "MovieSession")
                        .WithMany("Tickets")
                        .HasForeignKey("MovieSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cinema_ticket_seller_pdi.Models.Order", "Order")
                        .WithMany("Tickets")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieSession");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.User", b =>
                {
                    b.HasOne("cinema_ticket_seller_pdi.Models.MovieTheater", "MovieTheater")
                        .WithMany("Employees")
                        .HasForeignKey("MovieTheaterId");

                    b.Navigation("MovieTheater");
                });

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.Movie", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.MovieSession", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.MovieTheater", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("cinema_ticket_seller_pdi.Models.Order", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
